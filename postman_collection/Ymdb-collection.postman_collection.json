{
	"info": {
		"_postman_id": "93577e55-1dc9-44d9-a5a0-ab7263a32f15",
		"name": "Ymdb-collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16131548"
	},
	"item": [
		{
			"name": "registration // No Auth",
			"item": [
				{
					"name": "get_confirmatior_codes",
					"item": [
						{
							"name": "get_confirmation_code_for_regular_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"email\": {\"type\": \"string\"},",
											"        \"username\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"email\", \"username\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос на регистрацию пользователя возвращает статус-код 200\"",
											"    ).to.be.eql(\"OK\");",
											"    const email = _.get(responseData, \"email\");",
											"    if (email) {",
											"        pm.collectionVariables.set(\"userEmail\", email);",
											"    }",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"userUsername\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"user@no-admin.ru\",\n  \"username\": \"regular-user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_confimation_code_for_superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"email\": {\"type\": \"string\"},",
											"        \"username\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"email\", \"username\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что пользователь, данные которого уже есть в базе данных, может запросить код подтверждения\"",
											"    ).to.be.eql(\"OK\");",
											"    const email = _.get(responseData, \"email\");",
											"    if (email) {",
											"        pm.collectionVariables.set(\"superuserEmail\", email);",
											"    }",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"superuserUsername\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{superuserEmail}}\",\n  \"username\": \"{{superuserUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_confimation_code_for_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"email\": {\"type\": \"string\"},",
											"        \"username\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"email\", \"username\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа - 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что пользователь, данные которого уже есть в базе данных, может запросить код подтверждения\"",
											"    ).to.be.eql(\"OK\");",
											"    const email = _.get(responseData, \"email\");",
											"    if (email) {",
											"        pm.collectionVariables.set(\"adminEmail\", email);",
											"    }",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"adminUsername\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{adminEmail}}\",\n  \"username\": \"{{adminUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_confimation_code_for_moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"email\": {\"type\": \"string\"},",
											"        \"username\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"email\", \"username\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что пользователь, данные которого уже есть в базе данных, может запросить код подтверждения\"",
											"    ).to.be.eql(\"OK\");",
											"    const email = _.get(responseData, \"email\");",
											"    if (email) {",
											"        pm.collectionVariables.set(\"moderatorEmail\", email);",
											"    }",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"moderatorUsername\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{moderatorEmail}}\",\n  \"username\": \"{{moderatorUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_tokens",
					"item": [
						{
							"name": "get_token_for_superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"token\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"token\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос с корректным кодом подтверждения возвращает ответ со статус-кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"    const token = _.get(responseData, \"token\");",
											"    if (token) {",
											"        pm.collectionVariables.set(\"superuserToken\", token);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{superuserUsername}}\",\n  \"confirmation_code\": \"{{superuserConfirmationCode}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/token/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"token",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_token_for_regular_user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"token\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"token\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос с корректным кодом подтверждения возвращает ответ со статус-кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"    const token = _.get(responseData, \"token\");",
											"    if (token) {",
											"        pm.collectionVariables.set(\"userToken\", token);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{userUsername}}\",\n  \"confirmation_code\": \"{{userConfirmationCode}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/token/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"token",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_token_for_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"token\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"token\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос с корректным кодом подтверждения возвращает ответ со статус-кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"    const token = _.get(responseData, \"token\");",
											"    if (token) {",
											"        pm.collectionVariables.set(\"adminToken\", token);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{adminUsername}}\",\n  \"confirmation_code\": \"{{adminConfirmationCode}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/token/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"token",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_token_for_moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"token\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"token\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос с корректным кодом подтверждения возвращает ответ со статус-кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"    const token = _.get(responseData, 'token');",
											"    if (token) {",
											"        pm.collectionVariables.set(\"moderatorToken\", token);",
											"    }",
											"});",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{moderatorUsername}}\",\n  \"confirmation_code\": \"{{moderatorConfirmationCode}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/token/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"token",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "registration_bad_requests",
					"item": [
						{
							"name": "username_and_email_both_in_use_by_different_users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"username\": {",
											"            \"type\": \"array\",",
											"            \"items\": {\"type\": \"string\"}",
											"        },",
											"        \"email\": {",
											"            \"type\": \"array\",",
											"            \"items\": {\"type\": \"string\"}",
											"        }",
											"    },",
											"    \"required\": [\"username\", \"email\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если запрос содержит `username` зарегистрированного пользователя и несоответствующий ему `email` - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\")",
											"});",
											"",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"username\": \"{{adminUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "username_in_use",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"username\": {",
											"            \"type\": \"array\",",
											"            \"items\": {\"type\": \"string\"}",
											"        },",
											"    },",
											"    \"required\": [\"username\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если запрос содержит `username` зарегистрированного пользователя и незанятый `email` - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\")",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"available-email@user.ru\",\n  \"username\": \"{{userUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "email_in_use",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"email\": {",
											"            \"type\": \"array\",",
											"            \"items\": {\"type\": \"string\"}",
											"        },",
											"    },",
											"    \"required\": [\"email\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Если запрос содержит `email` зарегистрированного пользователя и незанятый `username` - должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\")",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{userEmail}}\",\n  \"username\": \"available@email.ru\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "use_me_as_username_forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"При попытке использовать `me` в качестве `username` должен вернуться ответ со статусом 400\"",
											"    ).to.be.eql(\"Bad Request\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"available@user-mail.ru\",\n  \"username\": \"me\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "too_long_username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Максимальная длина поля`username` должна иметь ограничение в 150 символов\"",
											"    ).to.be.eql(\"Bad Request\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"available@mail.ru\",\n  \"username\": \"{{tooLongUsername}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "too_long_email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Максимальная длина поля `email` должна иметь ограничение в 254 символа\"",
											"    ).to.be.eql(\"Bad Request\")",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{tooLongEmail}}\",\n  \"username\": \"some-username\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user_registration_with_invalid_username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"username\": {",
											"            \"type\": \"array\",",
											"            \"items\": {\"type\": \"string\"}",
											"        },",
											"    },",
											"    \"required\": [\"username\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Для поля `username` не должны приниматься значения, не соответствующие регулярному выражению `^[\\w.@+-]+\\Z`\"",
											"    ).to.be.eql(\"Bad Request\")",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"invalid-username@user.ru\",\n    \"username\": \"InvalidU$ername\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/auth/signup/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"auth",
										"signup",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "get_user_info",
					"item": [
						{
							"name": "get_users_list // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"username\": {\"type\": \"string\"},",
											"                    \"email\": {\"type\": \"string\"},",
											"                    \"role\": {\"type\": \"string\"},",
											"                    \"first_name\": {\"type\": \"string\"},",
											"                    \"last_name\": {\"type\": \"string\"},",
											"                    \"bio\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что администратору доступен эндпоинт `api/v1/users/`\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что администратору доступен эндпоинт `api/v1/users/{username}/`\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{userUsername}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userUsername}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_users_list // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"username\": {\"type\": \"string\"},",
											"                    \"email\": {\"type\": \"string\"},",
											"                    \"role\": {\"type\": \"string\"},",
											"                    \"first_name\": {\"type\": \"string\"},",
											"                    \"last_name\": {\"type\": \"string\"},",
											"                    \"bio\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что суперпользователю доступен эндпоинт `api/v1/users/`\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_user // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что суперпользователю доступен эндпоинт `api/v1/users/{username}/`\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{userUsername}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{userUsername}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_filtered_users_list // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"username\": {\"type\": \"string\"},",
											"                    \"email\": {\"type\": \"string\"},",
											"                    \"role\": {\"type\": \"string\"},",
											"                    \"first_name\": {\"type\": \"string\"},",
											"                    \"last_name\": {\"type\": \"string\"},",
											"                    \"bio\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что администратору доступен эндпоинт `api/v1/users/`\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(",
											"    \"Ответ должен содержать данные, удовлетворяющие условиям поиска\",",
											"    function () {",
											"        const assert_msg = \"Убедитесь, что ответ на запрос содержит данные, удовлетворяющие условию поиска\"",
											"        pm.expect(responseData.length > 0, assert_msg);",
											"        const expectedUsername = decodeURIComponent(pm.request.url.query.get(\"search\"));",
											"        for (elem of responseData.results) {",
											"            pm.expect(elem.username, assert_msg).contain(expectedUsername);",
											"        };",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/?search=moderator",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										""
									],
									"query": [
										{
											"key": "search",
											"value": "moderator"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create_user",
					"item": [
						{
							"name": "create_user_with_only_required_fields // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда администратор отправляет POST-запрос с корректными данными на адрес `api/v1/users/`, должен создаваться новый пользователь\"",
											"    ).to.be.eql(\"Created\");",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"testUser1\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Пользователю должна быть присвоена корректная роль\", function () {",
											"    pm.expect(",
											"        responseData.role,",
											"        \"Если в запросе не передать данные для поля `role`, то пользователю должна быть присвоена роль `user`\"",
											"    ).to.be.eql('user');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"username-and-email-only\",\n  \"email\": \"minimal-user@example.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_user_with_full_data // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда администратор отправляет POST-запрос с корректными данными на адрес `api/v1/users/`, должен создаваться новый пользователь\"",
											"    ).to.be.eql(\"Created\");",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"testUser2\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"full-data-user\",\n  \"email\": \"full-data-user@example.com\",\n  \"first_name\": \"Full\",\n  \"last_name\": \"Data\",\n  \"bio\": \"There should be a good story\",\n  \"role\": \"user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_moderator // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда администратор отправляет POST-запрос с корректными данными на адрес `api/v1/users/`, должен создаваться новый пользователь\"",
											"    ).to.be.eql(\"Created\");",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"testUser3\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Пользователю должна быть присвоена корректная роль\", function () {",
											"    pm.expect(",
											"        responseData.role,",
											"        \"Убедитесь, что администратор может создать пользователя с ролью `moderator`\"",
											"    ).to.be.eql('moderator');",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Yamd-moderator\",\n  \"email\": \"yamd-moderator@example.com\",\n  \"role\": \"moderator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_admin // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда администратор отправляет POST-запрос с корректными данными на адрес `api/v1/users/`, должен создаваться новый пользователь\"",
											"    ).to.be.eql(\"Created\");",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"testUser4\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Пользователю должна быть присвоена корректная роль\", function () {",
											"    pm.expect(",
											"        responseData.role,",
											"        \"Убедитесь, что администратор может создать пользователя с ролью `admin`\"",
											"    ).to.be.eql('admin');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"Yamd-admin\",\n  \"email\": \"yamd-admin@example.com\",\n  \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_user_with_full_data // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда суперпользователь отправляет POST-запрос с корректными данными на адрес `api/v1/users/`, должен создаваться новый пользователь\"",
											"    ).to.be.eql(\"Created\");",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"testUser5\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"full-data-user-by-superuser\",\n  \"email\": \"full-data-user-su@example.com\",\n  \"first_name\": \"Data\",\n  \"last_name\": \"Full\",\n  \"bio\": \"Created by superuser\",\n  \"role\": \"user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update_user_data",
					"item": [
						{
							"name": "patch_user_full_data // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PATCH-запрос администратора на `api/v1/users/{username}/` должен изменять данные пользователя\"",
											"    ).to.be.eql(\"OK\");",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"testUser2\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе совпадают с данными полей, переданных в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"patched-user\",\n  \"email\": \"patched-user@example.com\",\n  \"first_name\": \"Patch\",\n  \"last_name\": \"Request\",\n  \"bio\": \"No story\",\n  \"role\": \"moderator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{testUser2}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_user_role // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PATCH-запрос суперпользователя на `api/v1/users/{username}/` должен изменять данные пользователя\"",
											"    ).to.be.eql(\"OK\");",
											"    const username = _.get(responseData, \"username\");",
											"    if (username) {",
											"        pm.collectionVariables.set(\"testUser2\", username);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе совпадают с данными полей, переданных в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"patched-user\",\n  \"email\": \"patched-user@example.com\",\n  \"role\": \"admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{testUser2}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users/me",
					"item": [
						{
							"name": "get_users_me // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что любому зарегистрированному пользователю доступен эндпоинт `api/v1/users/me/`\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/me/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"me",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_users_me_username // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PATCH-запрос зарегистрированного пользователя на `api/v1/users/me/` должен изменять данные пользователя\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе совпадают с данными полей, переданных в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"selfpatched-user\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/me/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"me",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_users_me_all_data // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PATCH-запрос зарегистрированного пользователя на `api/v1/users/me/` должен изменять данные пользователя\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе совпадают с данными полей, переданных в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"twice-selfpatched-user\",\n  \"email\": \"twice-selfpatched-user@example.com\",\n  \"first_name\": \"SelfPatch\",\n  \"last_name\": \"MeRequest\",\n  \"bio\": \"Some text\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/me/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"me",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "patch_users_me_roll_back // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"username\": {\"type\": \"string\"},",
											"        \"email\": {\"type\": \"string\"},",
											"        \"role\": {\"type\": \"string\"},",
											"        \"first_name\": {\"type\": \"string\"},",
											"        \"last_name\": {\"type\": \"string\"},",
											"        \"bio\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PATCH-запрос зарегистрированного пользователя на `api/v1/users/me/` должен изменять данные пользователя\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе совпадают с данными полей, переданных в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{userUsername}}\",\n  \"email\": \"{{userEmail}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/me/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"me",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users_bad_requests",
					"item": [
						{
							"name": "get_user_info_without_permissions",
							"item": [
								{
									"name": "get_user_list // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что незарегистрированным пользователям не доступен эндпоинт `api/v1/users/`\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_user_list // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что пользователям без роли `admin` или `superuser` не доступен эндпоинт `api/v1/users/`\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_user_list // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что модератору не доступен эндпоинт `api/v1/users/`\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_user // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что незарегистрированному пользователю не доступен эндпоинт `api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{userUsername}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{userUsername}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_user // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что пользователям без роли `admin` или `superuser` не доступен эндпоинт `api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{userUsername}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{userUsername}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_user // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что модератору не доступен эндпоинт `api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{userUsername}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{userUsername}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create_user_without_permissions",
							"item": [
								{
									"name": "create_user // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что незарегистрированный пользователь не может создать нового пользователя через POST-запрос к `/api/v1/users/`\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"no-auth-user\",\n  \"email\": \"no-auth-user@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_user // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что пользователь без роли `admin` или `superuser` не может создать нового пользователя через POST-запрос к `/api/v1/users/`\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"user-created-by-user\",\n  \"email\": \"user-created-by-user@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_user // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что модератор не может создать нового пользователя через POST-запрос к `/api/v1/users/`\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"user-created-by-moderator\",\n  \"email\": \"user-created-by-moderator@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create_user_with_invalid_data",
							"item": [
								{
									"name": "create_user_with_long_username // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `username` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{tooLongUsername}}\",\n  \"email\": \"too-long-username@example.com\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_user_with_long_email // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `email` должно иметь ограничение длины в 254 символа\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"user-with-long-email\",\n  \"email\": \"{{tooLongEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_user_with_long_first_name // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `first_name` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"user-with-long-first-name\",\n  \"email\": \"first-name@example.com\",\n  \"first_name\": \"{{tooLongName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_user_with_long_last_name // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `first_name` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"user-with-long-last-name\",\n  \"email\": \"last-name@example.com\",\n  \"last_name\": \"{{tooLongName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_user_with_invalid_username // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const responseSchema = {",
													"    \"type\": \"object\",",
													"    \"properties\":{",
													"        \"username\": {",
													"            \"type\": \"array\",",
													"            \"items\": {\"type\": \"string\"}",
													"        },",
													"    },",
													"    \"required\": [\"username\"],",
													"    \"additionalProperties\": false",
													"};",
													"",
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Для поля `username` не должны приниматься значения, не соответствующие регулярному выражению `^[\\w.@+-]+\\Z`\"",
													"    ).to.be.eql(\"Bad Request\")",
													"});",
													"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
													"    pm.response.to.have.jsonSchema(responseSchema);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"invalid-username@new-user.ru\",\n    \"username\": \"#Inv,alidU$ername\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "patch_without_permissions",
							"item": [
								{
									"name": "patch_user_full_data // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что незарегистрированный пользователь не может изменять данные пользователей через PATCH-запрос к `/api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"patched-user\",\n  \"email\": \"patched-user@example.com\",\n  \"first_name\": \"Patch\",\n  \"last_name\": \"Request\",\n  \"bio\": \"No story\",\n  \"role\": \"user\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_full_data // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что пользователь без роли `admin` или `superuser` не может изменять данные пользователей через PATCH-запрос к `/api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"patched-user\",\n  \"email\": \"patched-user@example.com\",\n  \"first_name\": \"Patch\",\n  \"last_name\": \"Request\",\n  \"bio\": \"No story\",\n  \"role\": \"user\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_full_data // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что модератор не может изменять данные пользователей через PATCH-запрос к `/api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"patched-user\",\n  \"email\": \"patched-user@example.com\",\n  \"first_name\": \"Patch\",\n  \"last_name\": \"Request\",\n  \"bio\": \"No story\",\n  \"role\": \"user\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "patch_with_invalid_data",
							"item": [
								{
									"name": "patch_user_with_empty_username // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя задать пустую строку в качестве значения поля `username` через PATCH-запрос к `/api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_with_empty_email // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя задать пустую строку в качестве значения поля `email` через PATCH-запрос к `/api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_with_me_as_username // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя задать `me` в качестве значения поля `username` через PATCH-запрос к `/api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"me\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_with_existing_username // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя изменить значения поля `username` на уже занятое имя через PATCH-запрос к `/api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{userUsername}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_with_existing_email // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя изменить значения поля `email` на уже занятый адрес эл. почты через PATCH-запрос к `/api/v1/users/{username}/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{superuserEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_with_long_email // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `email` должно иметь ограничение длины в 254 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{tooLongEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_with_long_username // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `username` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{tooLongUsername}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_with_long_first_name // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `first_name` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"{{tooLongName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_user_with_long_last_name // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `last_name` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"last_name\": \"{{tooLongName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete_user_without_permissions",
							"item": [
								{
									"name": "delete_user // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что незарегистрированный пользователь не может удалять пользователей\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_user // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что пользователь без роли `admin` или `superuser` не может удалять пользователей\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_user // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что модератор не может удалять пользователей\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "404",
							"item": [
								{
									"name": "get_non_existing_user // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что при запросе данных несуществующего пользователя возвращается ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/non_existing_user/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"non_existing_user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_non_existing_user // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что при попытке изменения данных несуществующего пользователя возвращается ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"patched-user\",\n  \"email\": \"patched-user@example.com\",\n  \"first_name\": \"Patch\",\n  \"last_name\": \"Request\",\n  \"bio\": \"No story\",\n  \"role\": \"user\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/non_existing_user/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"non_existing_user",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_non_existing_user // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что при попытке удаления несуществующего пользователя возвращается ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/non_existing_user/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"non_existing_user",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "user_me_bad_requests",
							"item": [
								{
									"name": "get_users_me // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что эндпоинт `/api/v1/users/me/` недоступен для незарегистрированного пользователя\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_use_me_as_username // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя задать `me` в качестве значения поля `username` через PATCH-запрос к `/api/v1/users/me/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"me\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_with_invalid_username // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Для поля `username` не должны приниматься значения, не соответствующие регулярному выражению `^[\\w.@+-]+\\Z`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"#Inv,alidU$ern^me\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_empty_username // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя задать пустую строку в качестве значения поля `username` через PATCH-запрос к `/api/v1/users/me/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_empty_email // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя задать пустую строку в качестве значения поля `email` через PATCH-запрос к `/api/v1/users/me/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_with_existing_username // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя изменить значения поля `username` на уже занятое имя через PATCH-запрос к `/api/v1/users/me/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{adminUsername}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_with_existing_email // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что нельзя изменить значения поля `email` на уже адрес эл. почты через PATCH-запрос к `/api/v1/users/me/`\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{adminEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_with_long_email // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `email` должно иметь ограничение длины в 254 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{tooLongEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_with_long_username // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `username` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"{{tooLongUsername}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_with_long_first_name // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `first_name` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"first_name\": \"{{tooLongName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_with_long_last_name // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Поле `last_name` должно иметь ограничение длины в 150 символов\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"last_name\": \"{{tooLongName}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "patch_users_me_role // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const responseData = pm.response.json();",
													"const responseSchema = {",
													"    \"type\": \"object\",",
													"    \"properties\": {",
													"        \"username\": {\"type\": \"string\"},",
													"        \"email\": {\"type\": \"string\"},",
													"        \"role\": {\"type\": \"string\"},",
													"        \"first_name\": {\"type\": \"string\"},",
													"        \"last_name\": {\"type\": \"string\"},",
													"        \"bio\": {\"type\": \"string\"},",
													"    },",
													"    \"required\": [\"username\", \"email\", \"role\", \"first_name\", \"last_name\", \"bio\"],",
													"    \"additionalProperties\": false",
													"}",
													"",
													"pm.test(\"Статус-код ответа должен быть 200\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"PATCH-запрос зарегистрированного пользователя на `api/v1/users/me/` изменяет данные пользователя\"",
													"    ).to.be.eql(\"OK\");",
													"});",
													"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
													"    pm.response.to.have.jsonSchema(responseSchema);",
													"});",
													"pm.test(\"Изменение данных поля `role` должно быть недоступно\", function () {",
													"    pm.expect(",
													"        pm.response.json().role,",
													"        \"Убедитесь, что пользователь не может сменить роль через запрос к `api/v1/users/me/`\"",
													"    ).to.be.eql(\"user\")",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"role\": \"admin\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/me/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"me",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "forbidden_request_methods",
							"item": [
								{
									"name": "update_user_by_put_request // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 405\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"PUT-запрос на обновление данных пользователя должен возвращать ответ со статус-кодом 405\"",
													"    ).to.be.eql(\"Method Not Allowed\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"put-user\",\n  \"email\": \"put-user@example.com\",\n  \"first_name\": \"Put\",\n  \"last_name\": \"Request\",\n  \"bio\": \"No story\",\n  \"role\": \"moderator\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"users",
												"{{testUser2}}",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "delete_user",
					"item": [
						{
							"name": "delete_first_test_user // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что администратор может удалять пользователей\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser1}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{testUser1}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_second_test_user // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что администратор может удалять пользователей\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser2}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{testUser2}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_third_test_user // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что суперпользователь может удалять пользователей\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser3}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{testUser3}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete__test_user // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что суперпользователь может удалять пользователей\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser4}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{testUser4}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_fifth_test_user // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что суперпользователь может удалять пользователей\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/users/{{testUser5}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"users",
										"{{testUser5}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "categories",
			"item": [
				{
					"name": "categories_creation",
					"item": [
						{
							"name": "create_category // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"name\": {\"type\": \"string\"},",
											"        \"slug\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"name\", \"slug\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос администратора на создание категории должен вернуть ответ со статускодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const slug = _.get(responseData, \"slug\");",
											"    if (slug) {",
											"        pm.collectionVariables.set(\"adminCategory\", slug);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"admin-category\",\n  \"slug\": \"admin-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_category // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"name\": {\"type\": \"string\"},",
											"        \"slug\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"name\", \"slug\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос суперпользователя на создание категории должен вернуть ответ со статускодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const slug = _.get(responseData, \"slug\");",
											"    if (slug) {",
											"        pm.collectionVariables.set(\"superuserCategory\", slug);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"superuser-category\",\n  \"slug\": \"superuser-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "categories_creation_bad_requests",
					"item": [
						{
							"name": "create_category // Moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Модератор не должен иметь возможности создавать категории\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"moderator-category\",\n  \"slug\": \"moderator-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_category // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Обычный пользователь без роли `admin` или `superuser` не должен иметь возможности создавать категории\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"user-category\",\n  \"slug\": \"user-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_category // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 401\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Незарегистрированный пользователь не должен иметь возможности создавать категории\"",
											"    ).to.be.eql(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"anon-category\",\n  \"slug\": \"anon-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_category_with_duplicated_slug // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Создание категорий с дублирующимся слагом не допускается\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"duplecated-slug-category\",\n  \"slug\": \"{{adminCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_category_with_long_slug // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Длина поля `slug` должна быть ограничена 50 символами\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"too-long-slug-category\",\n  \"slug\": \"slugs-longer-than-fifty-symbols-should-be-forbidden\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_category_with_long_name // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Длина поля `name` должна быть ограничена 256 символами\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{tooLongCategoryGenreName}}\",\n  \"slug\": \"long-name\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_category_with_forbidden_symbols // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Для поля `slug` не должны приниматься названия, не соответствующие регулярному выражению `^[-a-zA-Z0-9_]+$`\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"bad-slug-category\",\n  \"slug\": \"{{badSlug}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_category_by_put_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PUT-запрос на обновление данных категории должен возвращать ответ со статус-кодом 405\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated-admin-category\",\n  \"slug\": \"admin-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/{{adminCategory}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										"{{adminCategory}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_category_by_patch_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PATCH-запрос на обновление данных категории должен возвращать ответ со статус-кодом 405\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated-admin-category\",\n  \"slug\": \"admin-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/{{adminCategory}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										"{{adminCategory}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_categories_list // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"count\": {\"type\": \"number\"},",
									"        \"next\": {\"type\": [\"string\", \"null\"]},",
									"        \"previous\": {\"type\": [\"string\", \"null\"]},",
									"        \"results\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\":{",
									"                    \"name\": {\"type\": \"string\"},",
									"                    \"slug\": {\"type\": \"string\"}",
									"                },",
									"                \"required\": [\"name\", \"slug\"],",
									"                \"additionalProperties\": false",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"Убедитесь, что незарегистрированный пользователь может получить список картегорий`\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/categories/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"categories",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "genres",
			"item": [
				{
					"name": "genres_creation",
					"item": [
						{
							"name": "create_genre // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"name\": {\"type\": \"string\"},",
											"        \"slug\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"name\", \"slug\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос администратора на создание жанра должен вернуть ответ со статускодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const slug = _.get(responseData, \"slug\");",
											"    if (slug) {",
											"        pm.collectionVariables.set(\"adminGenre\", slug);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"admin-genre\",\n  \"slug\": \"admin-genre-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_genre // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"name\": {\"type\": \"string\"},",
											"        \"slug\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"name\", \"slug\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос суперпользователя на создание жанра должен вернуть ответ со статускодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const slug = _.get(responseData, \"slug\");",
											"    if (slug) {",
											"        pm.collectionVariables.set(\"superuserGenre\", slug);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"superuser-genre\",\n  \"slug\": \"superuser-genre-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "genres_creation_bad_requests",
					"item": [
						{
							"name": "create_genre // Moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Модератор не должен иметь возможности создавать жанры\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"moderator-genre\",\n  \"slug\": \"moderator-genre-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_genre // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 403\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Пользователь без роли `admin` или `superuser` не должен иметь возможности создавать жанры\"",
											"    ).to.be.eql(\"Forbidden\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"user-genre\",\n  \"slug\": \"user-genre-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_genre // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 401\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Незарегистрированный пользователь не должен иметь возможности создавать жанры\"",
											"    ).to.be.eql(\"Unauthorized\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"anon-genre\",\n  \"slug\": \"anon-genre-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_genre_with_duplicated_slug // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Создание жанров с дублирующимся слагом не допускается\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"duplecated-slug-category\",\n  \"slug\": \"{{adminGenre}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_genre_with_long_slug // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Длина поля `slug` должна быть ограничена 50 символами\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"too-long-slug-genre\",\n  \"slug\": \"slugs-longer-than-fifty-symbols-should-be-forbidden\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_genre_with_long_name // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Длина поля `name` должна быть ограничена 256 символами\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{tooLongCategoryGenreName}}\",\n  \"slug\": \"long-name-genre\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_genre_with_forbidden_symbols // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 400\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Для поля `slug` не должны приниматься названия, не соответствующие регулярному выражению `^[-a-zA-Z0-9_]+$`\"",
											"    ).to.be.eql(\"Bad Request\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"bad-slug-genre\",\n  \"slug\": \"{{badSlug}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_genre_by_put_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PUT-запрос на обновление данных жанра должен возвращать ответ со статус-кодом 405\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated-admin-genre\",\n  \"slug\": \"admin-genre-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/{{adminGenre}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										"{{adminGenre}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_genre_by_patch_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PATCH-запрос на обновление данных жанра должен возвращать ответ со статус-кодом 405\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"updated-admin-genre\",\n  \"slug\": \"admin-genre-slug\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/{{adminGenre}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										"{{adminGenre}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_genres_list // No Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseData = pm.response.json();",
									"const responseSchema = {",
									"    \"type\": \"object\",",
									"    \"properties\":{",
									"        \"count\": {\"type\": \"number\"},",
									"        \"next\": {\"type\": [\"string\", \"null\"]},",
									"        \"previous\": {\"type\": [\"string\", \"null\"]},",
									"        \"results\": {",
									"            \"type\": \"array\",",
									"            \"items\": {",
									"                \"type\": \"object\",",
									"                \"properties\":{",
									"                    \"name\": {\"type\": \"string\"},",
									"                    \"slug\": {\"type\": \"string\"}",
									"                },",
									"                \"required\": [\"name\", \"slug\"],",
									"                \"additionalProperties\": false",
									"            }",
									"        }",
									"    }",
									"};",
									"",
									"pm.test(\"Статус-код ответа должен быть 200\", function () {",
									"    pm.expect(",
									"        pm.response.status,",
									"        \"Убедитесь, что незарегистрированный пользователь может получить список жанров`\"",
									"    ).to.be.eql(\"OK\");",
									"});",
									"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://127.0.0.1:8000/api/v1/genres/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8000",
							"path": [
								"api",
								"v1",
								"genres",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "titles",
			"item": [
				{
					"name": "titles_creation",
					"item": [
						{
							"name": "create_title_with_full_data // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда администратор отправляет POST-запрос с корректными данными для создание произведения - должен вернуться ответ с кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const titleId = _.get(responseData, \"id\");",
											"    if (titleId) {",
											"        pm.collectionVariables.set(\"adminTitle\", titleId);",
											"    }",
											"    const titleName = _.get(responseData, \"name\");",
											"    if (titleName) {",
											"        pm.collectionVariables.set(\"adminTitleName\", titleName);",
											"    }",
											"    const titleYear = _.get(responseData, \"year\");",
											"    if (titleYear) {",
											"        pm.collectionVariables.set(\"adminTitleYear\", titleYear);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Admin Title\",\n    \"year\": 2020,\n    \"description\": \"Test title by admin\",\n    \"genre\": [\n        \"{{adminGenre}}\",\n        \"{{superuserGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_title_only_required_fields // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда администратор отправляет POST-запрос для создание произведения, содержащий только обязательные поля - должен вернуться ответ с кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const titleId = _.get(responseData, \"id\");",
											"    if (titleId) {",
											"        pm.collectionVariables.set(\"adminShortTitle\", titleId);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Short Admin Title\",\n    \"year\": 2020,\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_title_with_full_data // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"ССтатус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда суперпользователь отправляет POST-запрос с корректными данными для создание произведения - должен вернуться ответ с кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const titleId = _.get(responseData, \"id\");",
											"    if (titleId) {",
											"        pm.collectionVariables.set(\"superuserTitle\", titleId);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Superuser Title\",\n    \"year\": 2000,\n    \"description\": \"Test title by superuser\",\n    \"genre\": [\n        \"{{superuserGenre}}\"\n    ],\n    \"category\": \"{{superuserCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_titles_info",
					"item": [
						{
							"name": "get_titles_list // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"number\"},",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"year\": {\"type\": \"number\"},",
											"                    \"rating\": {\"type\": [\"number\", \"null\"]},",
											"                    \"description\": {\"type\": \"string\"},",
											"                    \"genre\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"name\": {\"type\": \"string\"},",
											"                                \"slug\": {\"type\": \"string\"},",
											"                            },",
											"                            \"required\": [\"name\", \"slug\"],",
											"                            \"additionalProperties\": false",
											"                        }",
											"                    },",
											"                    \"category\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": {\"type\": \"string\"},",
											"                            \"slug\": {\"type\": \"string\"},",
											"                        },",
											"                        \"required\": [\"name\", \"slug\"],",
											"                        \"additionalProperties\": false",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_titles_list_filtered_by_category // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"number\"},",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"year\": {\"type\": \"number\"},",
											"                    \"rating\": {\"type\": [\"number\", \"null\"]},",
											"                    \"description\": {\"type\": \"string\"},",
											"                    \"genre\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"name\": {\"type\": \"string\"},",
											"                                \"slug\": {\"type\": \"string\"},",
											"                            },",
											"                            \"required\": [\"name\", \"slug\"],",
											"                            \"additionalProperties\": false",
											"                        }",
											"                    },",
											"                    \"category\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": {\"type\": \"string\"},",
											"                            \"slug\": {\"type\": \"string\"},",
											"                        },",
											"                        \"required\": [\"name\", \"slug\"],",
											"                        \"additionalProperties\": false",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(",
											"    \"Ответ должен содержать данные, удовлетворяющие условиям поиска\",",
											"    function () {",
											"        const assert_msg = \"Убедитесь, что ответ на запрос содержит данные, удовлетворяющие условию поиска\"",
											"        pm.expect(responseData.length > 0, assert_msg);",
											"        const expectedCategorySlug = pm.request.url.query.get(\"category\");",
											"        for (elem of responseData.results) {",
											"            pm.expect(elem.category.slug, assert_msg).to.be.eql(expectedCategorySlug);",
											"        };",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/?category={{adminCategory}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										""
									],
									"query": [
										{
											"key": "category",
											"value": "{{adminCategory}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_titles_list_filtered_by_genre // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"number\"},",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"year\": {\"type\": \"number\"},",
											"                    \"rating\": {\"type\": [\"number\", \"null\"]},",
											"                    \"description\": {\"type\": \"string\"},",
											"                    \"genre\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"name\": {\"type\": \"string\"},",
											"                                \"slug\": {\"type\": \"string\"},",
											"                            },",
											"                            \"required\": [\"name\", \"slug\"],",
											"                            \"additionalProperties\": false",
											"                        }",
											"                    },",
											"                    \"category\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": {\"type\": \"string\"},",
											"                            \"slug\": {\"type\": \"string\"},",
											"                        },",
											"                        \"required\": [\"name\", \"slug\"],",
											"                        \"additionalProperties\": false",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(",
											"    \"Ответ должен содержать данные, удовлетворяющие условиям поиска\",",
											"    function () {",
											"        const assert_msg = \"Убедитесь, что ответ на запрос содержит данные, удовлетворяющие условию поиска\"",
											"        pm.expect(responseData.length > 0, assert_msg);",
											"        const expectedGenreSlug = pm.request.url.query.get(\"genre\");",
											"        for (elem of responseData.results) {",
											"            var is_satisfied = false;",
											"            for (genre of elem.genre) {",
											"                if (genre.slug === expectedGenreSlug) {",
											"                    is_satisfied = true;",
											"                }",
											"            };",
											"            pm.expect(is_satisfied, assert_msg).to.be.true;",
											"        };",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/?genre={{adminGenre}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										""
									],
									"query": [
										{
											"key": "genre",
											"value": "{{adminGenre}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_titles_list_filtered_by_name // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"number\"},",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"year\": {\"type\": \"number\"},",
											"                    \"rating\": {\"type\": [\"number\", \"null\"]},",
											"                    \"description\": {\"type\": \"string\"},",
											"                    \"genre\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"name\": {\"type\": \"string\"},",
											"                                \"slug\": {\"type\": \"string\"},",
											"                            },",
											"                            \"required\": [\"name\", \"slug\"],",
											"                            \"additionalProperties\": false",
											"                        }",
											"                    },",
											"                    \"category\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": {\"type\": \"string\"},",
											"                            \"slug\": {\"type\": \"string\"},",
											"                        },",
											"                        \"required\": [\"name\", \"slug\"],",
											"                        \"additionalProperties\": false",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(",
											"    \"Ответ должен содержать данные, удовлетворяющие условиям поиска\",",
											"    function () {",
											"        const assert_msg = \"Убедитесь, что ответ на запрос содержит данные, удовлетворяющие условию поиска\"",
											"        pm.expect(responseData.length > 0, assert_msg);",
											"        const expectedTitleName = decodeURIComponent(pm.request.url.query.get(\"name\"));",
											"        for (elem of responseData.results) {",
											"            pm.expect(elem.name, assert_msg).contain(expectedTitleName);",
											"        };",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/?name={{adminTitleName}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "{{adminTitleName}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_titles_list_filtered_by_year // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"number\"},",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"year\": {\"type\": \"number\"},",
											"                    \"rating\": {\"type\": [\"number\", \"null\"]},",
											"                    \"description\": {\"type\": \"string\"},",
											"                    \"genre\": {",
											"                        \"type\": \"array\",",
											"                        \"items\": {",
											"                            \"type\": \"object\",",
											"                            \"properties\": {",
											"                                \"name\": {\"type\": \"string\"},",
											"                                \"slug\": {\"type\": \"string\"},",
											"                            },",
											"                            \"required\": [\"name\", \"slug\"],",
											"                            \"additionalProperties\": false",
											"                        }",
											"                    },",
											"                    \"category\": {",
											"                        \"type\": \"object\",",
											"                        \"properties\": {",
											"                            \"name\": {\"type\": \"string\"},",
											"                            \"slug\": {\"type\": \"string\"},",
											"                        },",
											"                        \"required\": [\"name\", \"slug\"],",
											"                        \"additionalProperties\": false",
											"                    }",
											"                },",
											"                \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(",
											"    \"Ответ должен содержать данные, удовлетворяющие условиям поиска\",",
											"    function () {",
											"        const assert_msg = \"Убедитесь, что ответ на запрос содержит данные, удовлетворяющие условию поиска\"",
											"        pm.expect(responseData.length > 0, assert_msg);",
											"        const expectedTitleYear = Number(pm.request.url.query.get(\"year\"));",
											"        for (elem of responseData.results) {",
											"            pm.expect(elem.year, assert_msg).to.be.equal(expectedTitleYear);",
											"        };",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/?year={{adminTitleYear}}",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										""
									],
									"query": [
										{
											"key": "year",
											"value": "{{adminTitleYear}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "get_title_detail // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update_titles",
					"item": [
						{
							"name": "update_title_full_data // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда администратор отправляет запрос с корректными данными на редактирование произведения - должен вернуться ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const assert_msg = \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        switch (reqKey) {",
											"            case \"category\":",
											"                pm.expect(responseData[reqKey].slug, assert_msg).to.be.eql(reqValue);",
											"                break;",
											"            case \"genre\":",
											"                const responseGenres = responseData[reqKey];",
											"                pm.expect(responseGenres.length === 1, assert_msg);",
											"                pm.expect(responseGenres[0].slug, assert_msg).to.be.eql(reqValue[0]);",
											"                break;",
											"            default:",
											"                pm.expect(responseData[reqKey], assert_msg).to.eql(reqValue);",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Updated title\",\n    \"year\": 2010,\n    \"description\": \"Title updated by admin\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_title_full_data // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда суперпользователь отправляет запрос с корректными данными на редактирование произведения - должен вернуться ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const assert_msg = \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        switch (reqKey) {",
											"            case \"category\":",
											"                pm.expect(responseData[reqKey].slug, assert_msg).to.be.eql(reqValue);",
											"                break;",
											"            case \"genre\":",
											"                const responseGenres = responseData[reqKey];",
											"                pm.expect(responseGenres.length === 1, assert_msg);",
											"                pm.expect(responseGenres[0].slug, assert_msg).to.be.eql(reqValue[0]);",
											"                break;",
											"            default:",
											"                pm.expect(responseData[reqKey], assert_msg).to.eql(reqValue);",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Second title update\",\n    \"year\": 1990,\n    \"description\": \"Title updated by superuser\",\n    \"genre\": [\n        \"{{superuserGenre}}\"\n    ],\n    \"category\": \"{{superuserCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "partial_update_title // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Когда администратор отправляет запрос с корректными данными на редактирование произведения - должен вернуться ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const assert_msg = \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        switch (reqKey) {",
											"            case \"category\":",
											"                pm.expect(responseData[reqKey].slug, assert_msg).to.be.eql(reqValue);",
											"                break;",
											"            case \"genre\":",
											"                const responseGenres = responseData[reqKey];",
											"                pm.expect(responseGenres.length === 1, assert_msg);",
											"                pm.expect(responseGenres[0].slug, assert_msg).to.be.eql(reqValue[0]);",
											"                break;",
											"            default:",
											"                pm.expect(responseData[reqKey], assert_msg).to.eql(reqValue);",
											"        }",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Partial update\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "titles_bad_requests",
					"item": [
						{
							"name": "create_title_bad_requests",
							"item": [
								{
									"name": "create_title_without_name // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос администратора на создание произведения без данных для поля `name` должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"year\": 2020,\n    \"description\": \"Test title without name\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_title_without_year // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если в POST-запросе администратора на создание произведения в поле `year` указан год позже текущего - должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"No year\",\n    \"description\": \"Test title without name\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_future_title // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос администратора на создание произведения, год выпуска которого превышает текущий, должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"From the future\",\n    \"year\": 9999,\n    \"description\": \"Future title\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_title_without_genre // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос администратора на создание произведения без данных для поля `genre` должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"No genre\",\n    \"year\": 2020,\n    \"description\": \"Test title by admin\",\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_title_with_non_existing_genre // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос администратора на создание произведения с некорректным содержимым поля `genre` должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Non-existsing genre\",\n    \"year\": 2020,\n    \"description\": \"Test title by admin\",\n    \"category\": \"{{adminCategory}}\",\n    \"genre\": [\n        \"thisGenreDoesNotExist_\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_title_without_category // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос администратора на создание произведения без данных для поля `category` должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"No category\",\n    \"year\": 2020,\n    \"description\": \"Test title without name\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_title_with_non_existing_category // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос администратора на создание произведения с некорректными данными для поля `category` должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"No category\",\n    \"year\": 2020,\n    \"description\": \"Test title without name\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"categoty\": \"thitCategoryDoesNotExist_\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{adminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "create_title_without_permissions",
							"item": [
								{
									"name": "create_title // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос незарегистрированного пользователя на создание произведения должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nema\": \"Unauthorized user title\",\n    \"year\": 2020,\n    \"description\": \"No description\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_title // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос на создание произведения, отправленный зарегистрированным пользователем без роли `admin` или `superuser`, должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nema\": \"Regular user title\",\n    \"year\": 2020,\n    \"description\": \"No description\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_title // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"POST-запрос модератора на создание произведения должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nema\": \"Moderator title\",\n    \"year\": 2020,\n    \"description\": \"No description\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update_title_with_invalid_data",
							"item": [
								{
									"name": "update_title_empty_name // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если POST-запрос администратора на редактирование произведения содержит пустое поле `name` - должен вернуться ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_title_invalid_year // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если POST-запрос администратора на редактирование произведения содержит некорректное значение поля `year` - должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"year\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_title_invalid_category // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если в POST-запросе администратора на редактирование произведения содержится некорректное значение поля `category` - должен вернуться ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"category\": \"thisCategoryDoesNotExist_\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_title_invalid_genre // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если в POST-запросе администратора на редактирование произведения содержится некорректное значение поля `genre` - должен вернуться ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"genre\": [\n        \"thisGenreDoesNotExist_\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{adminToken}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "update_title_without_permissions",
							"item": [
								{
									"name": "update_title // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на редактирование произведения должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Updated title\",\n    \"year\": 2015,\n    \"description\": \"Title updated by anon\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_title // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос на редактирование произведения, отправленный зарегистрированным пользователем без роли `admin` или `superuser`, должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Updated title\",\n    \"year\": 2015,\n    \"description\": \"Title updated by user\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_title // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос модератора на редактирование произведения должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Updated title\",\n    \"year\": 2015,\n    \"description\": \"Title updated by user\",\n    \"genre\": [\n        \"{{adminGenre}}\"\n    ],\n    \"category\": \"{{adminCategory}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "404",
							"item": [
								{
									"name": "get_non_existing_title // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос данных несуществующего произведения возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/thisTitleDoesNotExists/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"thisTitleDoesNotExists",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_non_existing_title // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос на обновление несуществующего произведения возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/thisTitleDoesNotExists/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"thisTitleDoesNotExists",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_non_existing_title // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос на удаление несуществующего произведения возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/thisTitleDoesNotExists/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"thisTitleDoesNotExists",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update_title_by_put_request // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 405\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"PUT-запрос на обновление данных произведения должен возвращать ответ со статус-кодом 405\"",
											"    ).to.be.eql(\"Method Not Allowed\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Update by PUT request\",\n    \"year\": 2021,\n    \"description\": \"Update by PUT request\",\n    \"genre\": [\n        \"{{superuserGenre}}\"\n    ],\n    \"category\": \"{{superuserCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "reviews",
			"item": [
				{
					"name": "create_reviews",
					"item": [
						{
							"name": "create_review // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос пользователя на создание отзыва должен вернуть ответ со статус-кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const reviewId = _.get(responseData, \"id\");",
											"    if (reviewId) {",
											"        pm.collectionVariables.set(\"userReview\", reviewId);",
											"    }",
											"    const score = _.get(responseData, \"score\");",
											"    if (score) {",
											"        pm.collectionVariables.set(\"userScore\", score);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"User review\",\n    \"score\": 4\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_review // Moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос модератора на создание отзыва должен вернуть ответ со статус-кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const reviewId = _.get(responseData, \"id\");",
											"    if (reviewId) {",
											"        pm.collectionVariables.set(\"moderatorReview\", reviewId);",
											"    }",
											"    const score = _.get(responseData, \"score\");",
											"    if (score) {",
											"        pm.collectionVariables.set(\"moderatorScore\", score);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Moderator review\",\n    \"score\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_review // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос администратора на создание отзыва должен вернуть ответ со статус-кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const reviewId = _.get(responseData, \"id\");",
											"    if (reviewId) {",
											"        pm.collectionVariables.set(\"adminReview\", reviewId);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Admin review\",\n    \"score\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_review // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос суперпользователя на создание отзыва должен вернуть ответ со статус-кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const reviewId = _.get(responseData, \"id\");",
											"    if (reviewId) {",
											"        pm.collectionVariables.set(\"superuserReview\", reviewId);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Superuser review\",\n    \"score\": 9\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "title_rating",
					"item": [
						{
							"name": "get_title_with_rating // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Значение поля `rating` должно соответствовать ожидаемому\", function () {",
											"    const userScore = Number(pm.collectionVariables.get(\"userScore\"));",
											"    const moderatorScore = Number(pm.collectionVariables.get(\"moderatorScore\"));",
											"    const expectedRating = Math.floor((userScore + moderatorScore) / 2);",
											"    const currentRating = Number(_.get(responseData, 'rating'));",
											"    pm.expect(",
											"        currentRating,",
											"        \"Убедитесь, что рейтинг произведения вычисляется корректно\"",
											"    ).to.be.eql(expectedRating);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_title_to_check_rating_in_response // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"name\": {\"type\": \"string\"},",
											"        \"year\": {\"type\": \"number\"},",
											"        \"rating\": {\"type\": [\"number\", \"null\"]},",
											"        \"description\": {\"type\": \"string\"},",
											"        \"genre\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"name\": {\"type\": \"string\"},",
											"                    \"slug\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"name\", \"slug\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        },",
											"        \"category\": {",
											"            \"type\": \"object\",",
											"            \"properties\": {",
											"                \"name\": {\"type\": \"string\"},",
											"                \"slug\": {\"type\": \"string\"},",
											"            },",
											"            \"required\": [\"name\", \"slug\"],",
											"            \"additionalProperties\": false",
											"        }",
											"    },",
											"    \"required\": [\"id\", \"name\", \"year\", \"rating\", \"description\", \"genre\", \"category\"],",
											"    \"additionalProperties\": false",
											"}",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными на редактирование произведения, отправленный администратором, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Значение поля `rating` должно соответствовать ожидаемому\", function () {",
											"    const userScore = Number(pm.collectionVariables.get(\"userScore\"));",
											"    const moderatorScore = Number(pm.collectionVariables.get(\"moderatorScore\"));",
											"    const expectedRating = Math.floor((userScore + moderatorScore) / 2);",
											"    const currentRating = Number(_.get(responseData, 'rating'));",
											"    pm.expect(",
											"        currentRating,",
											"        \"Убедитесь, что рейтинг произведения вычисляется корректно\"",
											"    ).to.be.eql(expectedRating);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Check rating\",\n    \"year\": 2011,\n    \"description\": \"TCheck rating\",\n    \"genre\": [\n        \"{{adminGenre}}\",\n        \"{{superuserGenre}}\"\n    ],\n    \"category\": \"{{superuserCategory}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_reviews",
					"item": [
						{
							"name": "get_reviews_list // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"number\"},",
											"                    \"text\": {\"type\": \"string\"},",
											"                    \"author\": {\"type\": \"string\"},",
											"                    \"score\": {\"type\": [\"number\", \"null\"]},",
											"                    \"pub_date\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_review_detail // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update_reviews",
					"item": [
						{
							"name": "update_review // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными на редактирование отзыва, отправленный автором, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Review updated by user\",\n    \"score\": 8\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_only_score // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос автора на изменение оценки в отзыве должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"score\": 9\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_only_text // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос автора на изменение текста в отзыве должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"New text\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_review // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными, отправленный администратором на редактирование чужого отзыва, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Review updated by admin\",\n    \"score\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_review // Moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными, отправленный модератором на редактирование чужого отзыва, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Review updated by modarator\",\n    \"score\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_review // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"score\": {\"type\": [\"number\", \"null\"]},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"score\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными, отправленный суперпользователем на редактирование чужого отзыва, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Review updated by superuser\",\n    \"score\": 6\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "reviews_bad_requests",
					"item": [
						{
							"name": "create_review_bad_requests",
							"item": [
								{
									"name": "create_review_without_score_field // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если пользователь отправляет запрос на создание отзыва, не указав данные для поля `score` - должен вернуться ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"No score review\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_review_with_zero_score // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание отзыва с оценкой ниже единицы должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Zero score review\",\n    \"score\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_review_with_too_high_score // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание отзыва с оценкой выше 10 должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Too high score review\",\n    \"score\": 11\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_review_without_text // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание отзыва без текста должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"score\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_review_with_empty_text // Superuser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание отзыва с пустым текстом должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"\",\n    \"score\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_review // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на создание отзыва должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Review by anon\",\n    \"score\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_second_review_on_same_title // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание второго отзыва на одно произведение должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Second review on the same title\",\n    \"score\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update_review_bad_requests",
							"item": [
								{
									"name": "update_review_with_zero_score // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос автора на изменение оценки в отзыве на ноль должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Zero score review\",\n    \"score\": 0\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{userReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_review_with_too_high_score // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос автора на изменение оценки в отзыве на значение больше 10 должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Too high score review\",\n    \"score\": 11\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{userReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_review_with_empty_text // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос автора на изменение текста в отзыве на пустую строку должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{userReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_foreign_review // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на изменение чужого отзыва должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update foreign review\",\n    \"score\": 5\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{moderatorReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{moderatorReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_review // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на изменение отзыва должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update review by anon\",\n    \"score\": 6\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{moderatorReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{moderatorReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_review_by_put_request // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 405\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"PUT-запрос на обновление данных отзыва должен вернуть ответ со статус-кодом 405\"",
													"    ).to.be.eql(\"Method Not Allowed\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update review by PUT request\",\n    \"score\": 6\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{moderatorReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{moderatorReview}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "404",
							"item": [
								{
									"name": "create_review_for_non_existing_title // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание отзыва к несуществующему произведению должен вернуть ответ с кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Review for non-existing review\",\n    \"score\": 2\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/99999/reviews/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"99999",
												"reviews",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_non_existing_review // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос на получение несуществующего отзыва возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/77777/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"77777",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_review_with_wrong_title_id // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на получение отзыва отправлен на URL с некорректным id произведения - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminShortTitle}}/reviews/{{superuserReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminShortTitle}}",
												"reviews",
												"{{superuserReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_non_existing_review // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос на обновление несуществующего отзыва возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Some words\",\n    \"score\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/99999/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"99999",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_review_with_wrong_title_id // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на обновление отзыва отправлен на URL с некорректным id произведения - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Some words\",\n    \"score\": 10\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminShortTitle}}/reviews/{{superuserReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminShortTitle}}",
												"reviews",
												"{{superuserReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_non_existing_review // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос на удаление несуществующего отзыва возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/77777/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"77777",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "comments",
			"item": [
				{
					"name": "create_comments",
					"item": [
						{
							"name": "create_comment // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос пользователя на создание комментария должен вернуть ответ со статус-кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const commentId = _.get(responseData, \"id\");",
											"    if (commentId) {",
											"        pm.collectionVariables.set(\"userComment\", commentId);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"User comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/comments/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										"comments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_comment // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос администратора на создание комментария должен вернуть ответ со статус-кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const commentId = _.get(responseData, \"id\");",
											"    if (commentId) {",
											"        pm.collectionVariables.set(\"adminComment\", commentId);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Admin comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{moderatorReview}}/comments/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{moderatorReview}}",
										"comments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_comment // Moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос модератора на создание комментария должен вернуть ответ со статус-кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const commentId = _.get(responseData, \"id\");",
											"    if (commentId) {",
											"        pm.collectionVariables.set(\"moderatorComment\", commentId);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Moderator comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create_comment // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"}",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 201\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос суперпользователя на создание комментария должен вернуть ответ со статус-кодом 201\"",
											"    ).to.be.eql(\"Created\");",
											"    const commentId = _.get(responseData, \"id\");",
											"    if (commentId) {",
											"        pm.collectionVariables.set(\"superuserComment\", commentId);",
											"    }",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Superuser comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "get_comments",
					"item": [
						{
							"name": "get_comments_list // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\":{",
											"        \"count\": {\"type\": \"number\"},",
											"        \"next\": {\"type\": [\"string\", \"null\"]},",
											"        \"previous\": {\"type\": [\"string\", \"null\"]},",
											"        \"results\": {",
											"            \"type\": \"array\",",
											"            \"items\": {",
											"                \"type\": \"object\",",
											"                \"properties\": {",
											"                    \"id\": {\"type\": \"number\"},",
											"                    \"text\": {\"type\": \"string\"},",
											"                    \"author\": {\"type\": \"string\"},",
											"                    \"pub_date\": {\"type\": \"string\"},",
											"                },",
											"                \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"                \"additionalProperties\": false",
											"            }",
											"        }",
											"    },",
											"    \"required\": [\"count\", \"next\", \"previous\", \"results\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get_comment_detail // No Auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"GET-запрос незарегистрированного пользователя должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{moderatorComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										"{{moderatorComment}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "update_comments",
					"item": [
						{
							"name": "update_comment_by_author // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными, отправленный автором на редактирование комментария, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"New text for user comment\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/comments/{{userComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										"comments",
										"{{userComment}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_comment // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными, отправленный администратором на редактирование чужого комментария, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Updated by admin\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{superuserComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										"{{superuserComment}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_comment // Moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными, отправленный модератором на редактирование чужого комментария, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Updated by moderator\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{superuserComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										"{{superuserComment}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update_comment // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = pm.response.json();",
											"const responseSchema = {",
											"    \"type\": \"object\",",
											"    \"properties\": {",
											"        \"id\": {\"type\": \"number\"},",
											"        \"text\": {\"type\": \"string\"},",
											"        \"author\": {\"type\": \"string\"},",
											"        \"pub_date\": {\"type\": \"string\"},",
											"    },",
											"    \"required\": [\"id\", \"text\", \"author\", \"pub_date\"],",
											"    \"additionalProperties\": false",
											"};",
											"",
											"pm.test(\"Статус-код ответа должен быть 200\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос с корректными данными, отправленный суперпользователем на редактирование чужого комментария, должен вернуть ответ с кодом 200\"",
											"    ).to.be.eql(\"OK\");",
											"});",
											"pm.test(\"Структура ответа должна соответствовать ожидаемой\", function () {",
											"    pm.response.to.have.jsonSchema(responseSchema);",
											"});",
											"pm.test(\"Данные в ответе должны совпадать с данными в запросе\", function () {",
											"    const requestJson = JSON.parse(request.data);",
											"    for (const [reqKey, reqValue] of Object.entries(requestJson)) {",
											"        pm.expect(",
											"            responseData[reqKey],",
											"            \"Убедитесь, что данные в ответе соответствуют данным, переданным в запросе\"",
											"        ).to.eql(reqValue);",
											"    }",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"text\": \"Updated by superuser\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{moderatorComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										"{{moderatorComment}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "comments_bad_requests",
					"item": [
						{
							"name": "create_comments_bad_requests",
							"item": [
								{
									"name": "create_comment_with_empty_text // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание комментария с пустой строкой в поле `text` должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/comments/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{userReview}}",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_comment_without_text_field // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание комментария с без данных для поля `text` должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/comments/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{userReview}}",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "create_comment // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на создание комментария должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Comment by anon\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/comments/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{userReview}}",
												"comments",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "update_comments_bad_requests",
							"item": [
								{
									"name": "update_comment_with_empty_text // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 400\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос администратора на изменение текста в комментарии на пустую строку должен вернуть ответ с кодом 400\"",
													"    ).to.be.eql(\"Bad Request\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{superuserComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{superuserComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_foreign_comment // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на обновление чужого комментария должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update foreign comment\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{moderatorComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{moderatorComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_comment // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на обновление комментария должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update by anon\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{moderatorComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{moderatorComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_comment_by_put_request // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 405\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"PUT-запрос на обновление данных комментария возвращается ответ со статус-кодом 405\"",
													"    ).to.be.eql(\"Method Not Allowed\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update by PUT request\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{moderatorComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{moderatorComment}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "404",
							"item": [
								{
									"name": "create_comment_with_wrong_ids_in_url // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на создание комментария с некорректными значениеми id в URL должен вернуть ответ с кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Wrong title id\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{superuserReview}}/comments/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{superuserReview}}",
												"comments",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_non_existing_comment // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос на получение несуществующего комментария возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/99999/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"99999",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_comment_with_wrong_title_id // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на получение комментария отправлен на URL с некорректным id произведения - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{adminReview}}/comments/{{superuserComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{superuserComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get_comment_with_wrong_review_id // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на получение комментария отправлен на URL с некорректным id отзыва - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{userReview}}/comments/{{superuserComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{userReview}}",
												"comments",
												"{{superuserComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_comment_with_wrong_title_id // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на обновление комментария отправлен на URL с некорректным id произведения - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update with wrong title id\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{adminReview}}/comments/{{superuserComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{superuserComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_comment_with_wrong_review_id // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на обновление комментария отправлен на URL с некорректным id отзыва - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update with wrong review id\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{userReview}}/comments/{{superuserComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{userReview}}",
												"comments",
												"{{superuserComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "update_non_existing_comment // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос на обновление несуществующего комментария возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"text\": \"Update non-existing comment\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/99999/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"99999",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_non_existing_comment // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос на удаление несуществующего комментария возвращает ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/99999/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"99999",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "delete_requests",
			"item": [
				{
					"name": "delete_comments",
					"item": [
						{
							"name": "delete_comments_bad_requests",
							"item": [
								{
									"name": "delete_comment_with_wrong_title_id // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на удаление комментария отправлен на URL с некорректным id произведения - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{adminReview}}/comments/{{superuserComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{superuserComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_comment_with_wrong_review_id // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на удаление комментария отправлен на URL с некорректным id отзыва - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{userReview}}/comments/{{superuserComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{userReview}}",
												"comments",
												"{{superuserComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_foreign_comment // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос пользователя на удаление чужого комментария должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{moderatorComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{moderatorComment}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_comment // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на удаление комментария должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{moderatorComment}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												"reviews",
												"{{adminReview}}",
												"comments",
												"{{moderatorComment}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete_comment_by_author // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос пользователя на удаление своего комментария возвращает ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/comments/{{userComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										"comments",
										"{{userComment}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_comment // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос администратора на удаление чужого комментария возвращает ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{moderatorComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										"{{moderatorComment}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_comment // Moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос модератора на удаление чужого комментария возвращает ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/comments/{{superuserComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										"comments",
										"{{superuserComment}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_comment // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос суперпользователя на удаление чужого комментария возвращает ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{moderatorReview}}/comments/{{adminComment}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{moderatorReview}}",
										"comments",
										"{{adminComment}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_reviews",
					"item": [
						{
							"name": "delete_reviews_bad_requests",
							"item": [
								{
									"name": "delete_review_with_wrong_title_id // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Если запрос на удаление отзыва отправлен на URL с некорректным id произведения - должен вернуться ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminShortTitle}}/reviews/{{superuserReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminShortTitle}}",
												"reviews",
												"{{superuserReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_foreign_review // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос пользователя на удаление чужого отзыва возвращает ответ со статус-кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{moderatorReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{moderatorReview}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_review // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Убедитесь, что запрос незарегистрированного пользователя на удаление отзыва возвращает ответ со статус-кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{moderatorReview}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{adminTitle}}",
												"reviews",
												"{{moderatorReview}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete_review_by_author // User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос пользователя на удаление своего отзыва возвращает ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{userToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{userReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{userReview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_review // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос администратора на удаление чужого отзыва возвращает ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/reviews/{{moderatorReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										"reviews",
										"{{moderatorReview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_review // Moderator",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос модератора на удаление чужого отзыва возвращает ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{moderatorToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{superuserReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{superuserReview}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_review // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что запрос суперпользователя на удаление чужого отзыва возвращает ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/reviews/{{adminReview}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										"reviews",
										"{{adminReview}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_titles",
					"item": [
						{
							"name": "delete_title_without_permissions",
							"item": [
								{
									"name": "delete_title // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 401\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на удаление произведения должен вернуть ответ с кодом 401\"",
													"    ).to.be.eql(\"Unauthorized\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_title // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос на удаление произведения, отправленный зарегистрированным пользователем, у которого нет роли `admin` или`superuser`, должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_title // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос модератора на удаление произведения должен вернуть ответ с кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"titles",
												"{{superuserTitle}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete_title // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что суперпользователь может удалять произведения\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{superuserToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{superuserTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{superuserTitle}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_title // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что администратор может удалять произведения\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminTitle}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_short_title // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Убедитесь, что администратор может удалять произведения\"",
											"    ).to.be.eql(\"No Content\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/titles/{{adminShortTitle}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"titles",
										"{{adminShortTitle}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_category",
					"item": [
						{
							"name": "category_bad_requests",
							"item": [
								{
									"name": "delete_admin_category // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на удаление категории должен вернуть ответ со статус-кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/categories/{{adminCategory}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"categories",
												"{{adminCategory}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_admin_category // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос на удаление категории, отправленный зарегистрированным пользователем, у которого нет роли `admin` или`superuser`, должен вернуть ответ со статус-кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/categories/{{adminCategory}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"categories",
												"{{adminCategory}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_admin_category // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос модератора на удаление категории должен вернуть ответ со статус-кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/categories/{{adminCategory}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"categories",
												"{{adminCategory}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_non_existent_category // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос администратора на удаление несуществующей категории должен вернуть ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/categories/category-does-not-exists/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"categories",
												"category-does-not-exists",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete_admin_category // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос администратора на удаление категории должен вернуть ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/{{adminCategory}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										"{{adminCategory}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_superuser_category // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос суперпользователя на удаление категории должен вернуть ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/categories/{{superuserCategory}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"categories",
										"{{superuserCategory}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "delete_genre",
					"item": [
						{
							"name": "category_bad_requests",
							"item": [
								{
									"name": "delete_admin_genre // No Auth",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос незарегистрированного пользователя на удаление жанра должен вернуть ответ со статус-кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/genres/{{adminGenre}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"genres",
												"{{adminGenre}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_admin_genre // User",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос на удаление жанра, отправленный зарегистрированным пользователем, у которого нет роли `admin` или`superuser`, должен вернуть ответ со статус-кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{userToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/genres/{{adminGenre}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"genres",
												"{{adminGenre}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_admin_genre // Moderator",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 403\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос модератора на удаление жанра должен вернуть ответ со статус-кодом 403\"",
													"    ).to.be.eql(\"Forbidden\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{moderatorToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/genres/{{adminGenre}}/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"genres",
												"{{adminGenre}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "delete_non_existent_genre // Admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус-код ответа должен быть 404\", function () {",
													"    pm.expect(",
													"        pm.response.status,",
													"        \"Запрос администратора на удаление несуществующего жанра должен вернуть ответ со статус-кодом 404\"",
													"    ).to.be.eql(\"Not Found\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{adminToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "http://127.0.0.1:8000/api/v1/genres/genre-does-not-exists/",
											"protocol": "http",
											"host": [
												"127",
												"0",
												"0",
												"1"
											],
											"port": "8000",
											"path": [
												"api",
												"v1",
												"genres",
												"genre-does-not-exists",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "delete_admin_category // Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос администратора на удаление жанра должен вернуть ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/{{adminGenre}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										"{{adminGenre}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete_superuser_genre // Superuser",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус-код ответа должен быть 204\", function () {",
											"    pm.expect(",
											"        pm.response.status,",
											"        \"Запрос суперпользователя на удаление жанра должен вернуть ответ со статус-кодом 204\"",
											"    ).to.be.eql(\"No Content\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{adminToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://127.0.0.1:8000/api/v1/genres/{{superuserGenre}}/",
									"protocol": "http",
									"host": [
										"127",
										"0",
										"0",
										"1"
									],
									"port": "8000",
									"path": [
										"api",
										"v1",
										"genres",
										"{{superuserGenre}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userConfirmationCode",
			"value": "0",
			"type": "string"
		},
		{
			"key": "moderatorConfirmationCode",
			"value": "0",
			"type": "string"
		},
		{
			"key": "superuserConfirmationCode",
			"value": "0",
			"type": "string"
		},
		{
			"key": "adminConfirmationCode",
			"value": "0",
			"type": "string"
		},
		{
			"key": "tooLongUsername",
			"value": "the-username-that-is-150-characters-long-and-should-not-pass-validation-if-the-serializer-is-configured-correctly-otherwise-the-current-test-will-fail-",
			"type": "string"
		},
		{
			"key": "tooLongEmail",
			"value": "i_have_never_seen_an_email_address_longer_than_two_hundred_and_fifty_four_characters_and_it_was_difficult_to_come_up_with_it_so_in_the_second_part_just_the_names_of_some_mail_services@yandex-google-yahoo-mailgun-protonmail-mailru-outlook-icloud-aol-neo.ru",
			"type": "string"
		},
		{
			"key": "tooLongCategoryGenreName",
			"value": "Название категории или жанра не должно быть длиннее двухсот пятидесяти шести символов. Проверьте настройку сериализатора и добавьте соответствующее огарничение длины. При использовании модельного сериализатора ограничение подтянется из модели автоматически.",
			"type": "string"
		},
		{
			"key": "badSlug",
			"value": "@!#$%^&*().",
			"type": "string"
		},
		{
			"key": "tooLongName",
			"value": "БарнабиМармадюкАлоизийБенджиКобвебДартаньянЭгбертФеликсГаспарГумбертИгнатийДжейденКасперЛеройМаксимилианНеддиОбъяхулуПепинКьюллиамРозенкранцСекстонТедд",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "user@no-admin.ru"
		},
		{
			"key": "superuserEmail",
			"value": "superuser@admin.ru"
		},
		{
			"key": "superuserUsername",
			"value": "superuser"
		},
		{
			"key": "moderatorEmail",
			"value": "moderator@admin.ru"
		},
		{
			"key": "moderatorUsername",
			"value": "moderator"
		},
		{
			"key": "adminEmail",
			"value": "admin-user@admin.ru"
		},
		{
			"key": "adminUsername",
			"value": "admin-user"
		},
		{
			"key": "userUsername",
			"value": "regular-user"
		}
	]
}